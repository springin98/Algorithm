1. 배열
[장점] 바로 접근 가능 : arr[10]
[단점] 삽입&삭제 O(N) : 하나를 추가하면 모두 밀어야 한다.

[Python] 자료형이 달라도 가능하다 : 데이터가 들어가 있는 게 아니라, 주소를 갖고 있기 때문
>> 리스트 컴프리헨션을 사용해야 하는 이유
a1 = [[0] * 5] *3
a1[1][1] = 99
print(a1)
a1[1][1]뿐만 아니라 3군데나 99로 나온다.
그 이유는 주소가 복사되기 때문인데, 이게 무슨 말이냐면
[0] [0] [0] [0] [0]
[0] [0] [0] [0] [0]
[0] [0] [0] [0] [0]
처럼 보이지만 실제로
[&0] [&1] [&2] [&3] [&4]
[&0] [&1] [&2] [&3] [&4]
[&0] [&1] [&2] [&3] [&4]
으로 되기 때문에
a1[1][1] 의 값을 99로 변경하면 &1 의 데이터가 99로 변하는 것이기 때문이다.

그래서 
a2 = [[0] * 5 for _ in range(3)]
(여기서 _ 은 i don't care 이라는 뜻)

2. 연결 리스트
노드가 사슬처럼 연결되어 있다.
노드는 데이터, 다음 노드의 주소를 갖고 있다.
[장점] 삽입, 삭제가 쉽다 : 밀어줄 필요없이 주소만 바꿔주면 되기 때문이다. O(1)
[단점] 접근이 O(N) : 3으로 가려면 1-2-3 의 순서를 거쳐야 한다.

>> 즉, 접근이 빨라야 하면 배열, 삽입&삭제가 빨라야 하면 연결 리스트